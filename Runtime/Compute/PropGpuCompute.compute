#pragma kernel CSCopy
#pragma kernel CSCull
#pragma kernel CSApplyIndirectArgs

#define UNITY_INDIRECT_DRAW_ARGS IndirectDrawIndexedArgs
#include "UnityIndirect.cginc"

#include "Packages/com.jedjoud.voxelterrain/Runtime/Compute/Props.cginc"

StructuredBuffer<int> temp_counters_buffer;
StructuredBuffer<int> temp_buffer_offsets_buffer;
StructuredBuffer<uint4> temp_buffer;

RWStructuredBuffer<uint4> perm_buffer;
RWStructuredBuffer<int> perm_buffer_counts_buffer;
RWStructuredBuffer<int> perm_buffer_offsets_buffer;
RWStructuredBuffer<float4x4> perm_matrices_buffer;
StructuredBuffer<int> perm_buffer_dst_copy_offsets_buffer;

RWStructuredBuffer<UNITY_INDIRECT_DRAW_ARGS> draw_args_buffer;
RWStructuredBuffer<uint> indirection_buffer;
RWStructuredBuffer<uint> visible_props_counters_buffer;

StructuredBuffer<uint> perm_props_in_use_bitset_buffer;
[numthreads(32, 1, 1)]
void CSCopy(uint3 id : SV_DispatchThreadID) {
	int index = id.x;
	int type = 0;

	if (index >= temp_counters_buffer[type]) {
		return;
	}

	int temp_buffer_src_offset = temp_buffer_offsets_buffer[type];
	int perm_buffer_dst_offset = perm_buffer_dst_copy_offsets_buffer[type];

	int src = index + temp_buffer_src_offset;
	int dst = index + perm_buffer_dst_offset;

	uint4 prop = temp_buffer[src];
	perm_buffer[dst] = prop;
	perm_matrices_buffer[dst] = UnpackPropToMatrix(prop);
}

[numthreads(32, 1, 1)]
void CSCull(uint3 id : SV_DispatchThreadID) {
	int index = id.x;
	int type = 0;

	if (id.x >= (uint)perm_buffer_counts_buffer[type]) {
		return;
	}

	int block = index >> 5;
	int local = index & 0x1F;
	bool in_use = ((perm_props_in_use_bitset_buffer[block] >> local) & 1) == 1;

	if (in_use) {
		uint dst_index;
		InterlockedAdd(visible_props_counters_buffer[type], 1u, dst_index);
		dst_index += (uint)perm_buffer_offsets_buffer[type];
		indirection_buffer[dst_index] = index;
	}
}

[numthreads(1, 1, 1)]
void CSApplyIndirectArgs(uint3 id : SV_DispatchThreadID) {
	IndirectDrawIndexedArgs args = draw_args_buffer[id.x];
	args.instanceCount = visible_props_counters_buffer[id.x];
	draw_args_buffer[id.x] = args;
}