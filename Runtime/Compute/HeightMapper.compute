#pragma kernel CSVertex
#pragma kernel CSFlatten

#define UNITY_INDIRECT_DRAW_ARGS IndirectDrawIndexedArgs
#include "UnityIndirect.cginc"

RWTexture3D<uint> voxels;
#include "Packages/com.jedjoud.voxelterrain/Runtime/Compute/Fetcher.cginc"

RWTexture2D<uint> maxHeight;
int indexOffset;
float3 vertexOffset;

int size;

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> normals;
RWStructuredBuffer<float3> colors;
RWStructuredBuffer<int> indices;
RWStructuredBuffer<UNITY_INDIRECT_DRAW_ARGS> cmdBuffer;

float3 normalMaxx(uint3 id) {
    float base = fetch(id);
    float x = fetch(id + uint3(1, 0, 0));
    float y = fetch(id + uint3(0, 1, 0));
    float z = fetch(id + uint3(0, 0, 1));
    return normalize(float3(base-x, base-y, base-z));
}

// https://www.ronja-tutorials.com/post/047-invlerp_remap/
float invLerp(float from, float to, float value){
  return (value - from) / (to - from);
}

[numthreads(8, 8, 8)]
void CSFlatten(uint3 id : SV_DispatchThreadID) {
    float base = fetch(id);
    float offset = fetch(id + uint3(0, 1, 0));
    
    if (base < 0.0 && offset >= 0.0) {
        InterlockedMax(maxHeight[id.xz], id.y);
    }
}

[numthreads(32, 32, 1)]
void CSVertex(uint3 id : SV_DispatchThreadID) {
    int index = id.x + id.y * size + indexOffset * size * size;
    uint3 idTemp = float3(id.x, maxHeight[id.xy], id.y);

    if (idTemp.y == 0 || idTemp.y == (uint)(size-1)) {
        return;
    }

    float base = fetch(idTemp);
    float offset = fetch(idTemp + uint3(0, 1, 0));
    float factor = invLerp(base, offset, 0.0);
    float floatHeight = factor + idTemp.y;

    vertices[index] = float3(id.x, floatHeight, id.y) + vertexOffset;
    colors[index] = 1.0;
    normals[index] = -normalize(lerp(normalMaxx(idTemp), normalMaxx(idTemp + uint3(0, 1, 0)), factor));

    if (any(id >= (uint)(size-1))) {
        return;
    }

    int check[4] = { index, index + 1, index + size, index + size + 1 };

    uint oldValue = 0;
    InterlockedAdd(cmdBuffer[0].indexCountPerInstance, 6, oldValue);
    
    indices[oldValue] = check[2];
    indices[oldValue + 1] = check[1];
    indices[oldValue + 2] = check[0];
    
    indices[oldValue + 3] = check[3];
    indices[oldValue + 4] = check[1];
    indices[oldValue + 5] = check[2];
    


}