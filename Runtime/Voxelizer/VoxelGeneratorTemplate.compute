#pragma kernel CSVoxelizer
#pragma kernel CSPropVoxelizer
#pragma kernel CSPropRaycaster
#pragma kernel CSClearRayCastData

#include "Packages/com.jedjoud.voxelterraingenerator/Runtime/Voxelizer/VoxelGeneratorStart.cginc"

// Called for each voxel in the chunk to check the density and material at a specific position
void VoxelAt(float3 position, out float density, out uint material) {
	/*
	density = position.y - snoise(position * 0.005) * 15 - 60;
	density = min(density, sdBox(position - float3(0, 190, 0), float3(300, 60, 300)));
	density = min(density, sdBox(position - float3(0, 160, 0), float3(300, 5, 300)));

	material = 0;
	return;
	*/

	// Density value for biome 1
	float density1 = -fbm(position.xz * 0.004, 5, 0.50, 2.1).x * 4 - 50;
	
	// Density value for biome 2
	float density2 = -fbmCellular(position.xz * 0.0008, 8, 0.4, 2.2).y * 920;

	// Mixer between biome 1 and biome 2
	float mixer = snoise(position.xz * 0.0003) * 0.5 + 0.5;
	mixer = smoothstep(0, 1, saturate(2 * (mixer - 0.5) + 0.5));

	density = position.y + lerp(density1, density2, mixer);

	// Cave mixer?
	float caveMixer = saturate(-(position.y - 100) / 20 * snoise(position * 0.0001 * float3(1, 3, 1)));

	float caveDensity = -fbmCellular(position * 0.003 * float3(1, 4, 1), 4, 0.4, 2.2).x * 620 - 50;
	float details = saturate(fbmCellular(position.xz * 0.03, 3, 0.4, 2.0).y);
	float details2 = saturate(fbmCellular(position.xz * 0.03 + 123.423, 4, 0.45, 2.1).x);
	details = smoothstep(0, 1, details);
	caveDensity += -details * 400;
	caveDensity += -details2 * 1200 * saturate(snoise(position.xz * 0.012));
	caveDensity += snoise(position * float3(1, 4, 1) * 0.24) * 4;

	density = lerp(density, caveDensity, caveMixer);
	material = caveMixer > 0.2 ? 1 : 0;
	
	//density = caveDensity;
}

#include "Packages/com.jedjoud.voxelterraingenerator/Runtime/Voxelizer/VoxelGeneratorEnd.cginc"