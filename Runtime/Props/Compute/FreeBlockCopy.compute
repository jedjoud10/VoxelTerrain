#pragma kernel CSFreeBlockCopy

// Input and output buffers
int segmentLookup;
RWStructuredBuffer<uint2> segmentIndexCount;
StructuredBuffer<uint> index;
StructuredBuffer<int> counter;
StructuredBuffer<uint4> tempProps;
RWStructuredBuffer<uint4> permProps;

// each bit represents 64 props
RWStructuredBuffer<uint> usedBitmask;

// Copy the temporary team props to the permanent team prop
[numthreads(32, 1, 1)]
void CSFreeBlockCopy(uint3 id : SV_DispatchThreadID)
{
	if (id.x == 0) {
		segmentIndexCount[segmentLookup] = uint2(index[0], counter[0]);
	}

	if ((id.x) >= (uint)counter[0]) {
		return;
	}

	uint finalIndex = index[0] + id.x;
	permProps[finalIndex] = tempProps[id.x];

	uint bitmaskIndex = finalIndex;
	uint block = bitmaskIndex / 32;
	uint local = bitmaskIndex % 32;

	InterlockedOr(usedBitmask[block], 1 << local);
}