#pragma kernel CSFreeBlockSearch

StructuredBuffer<int> tempCounters;
RWStructuredBuffer<uint> tempIndices;
StructuredBuffer<uint> usedBitmask;
StructuredBuffer<uint3> propSectionOffsets;
uint enabledProps;

// Finds a free index we can use to copy the temp memory to perm memory
[numthreads(32, 1, 1)]
void CSFreeBlockSearch(uint3 id : SV_DispatchThreadID)
{
	uint baseIndex = id.x + propSectionOffsets[id.y].y;
	uint count = tempCounters[id.y];

	if (count == 0 || ((enabledProps >> id.y) & 1) == 0) {
		return;
	}

	// TODO: Eventually fix this by checking whole blocks at once
	for (uint i = baseIndex; i < (baseIndex + count); i++)
	{
		uint block = i / 32;
		uint local = i % 32;
		if (((usedBitmask[block] >> local) & 1) == 1) {
			return;
		}
	}

	InterlockedMin(tempIndices[id.y], baseIndex);
}