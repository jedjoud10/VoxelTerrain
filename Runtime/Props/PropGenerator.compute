#pragma kernel CSPropenator

float propSegmentWorldSize;
float propSegmentResolution;
float3 propChunkOffset;
float3 worldOffset;
float3 worldScale;

// Seeding parameters
int3 permuationSeed;
int3 moduloSeed;

// Prop settings
float3 maxRandomPosition;
float3 basePosition;

float baseScale;
float maxRandomScale;

struct BlittableProp {
    float4 position_and_scale;
};

#include "Packages/com.jedjoud.voxelterraingenerator/Runtime/Utils/noises.cginc"
#include "Packages/com.jedjoud.voxelterraingenerator/Runtime/Utils/sdf.cginc"

// Used for async readback AND GPU indirect rendering
AppendStructuredBuffer<BlittableProp> props;

// Generates the prop data on the GPU (executed for EACH prop type available)
[numthreads(4, 4, 4)]
void CSPropenator(uint3 id : SV_DispatchThreadID)
{
	// Calculate the main world position
	float3 position = float3(id.xzy);
	position *= propSegmentWorldSize / propSegmentResolution;
	position += propChunkOffset;
	
	// World offset and scale
	position = (position * worldScale) + worldOffset;

	float mask = saturate(sdSphere(position, 200));
	
	if (position.y > -10.0 && position.y < 10 && mask < 0.5) {
		BlittableProp prop;
		float3 propPosition = (2*hash33(position)-1) * maxRandomPosition + basePosition + position;
		float propScale = (2*hash13(position)-1) * maxRandomScale + baseScale;
		prop.position_and_scale = float4(propPosition, propScale);
		props.Append(prop);
	}
}